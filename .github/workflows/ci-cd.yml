name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    name: Test & Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, customer-service, account-service, transaction-service, loan-service, analytics-service, websocket-service, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/api-gateway/package-lock.json
          backend/services/*/package-lock.json
          frontend/package-lock.json

    - name: Install dependencies
      run: |
        if [ -f "backend/${{ matrix.service }}/package.json" ]; then
          cd backend/${{ matrix.service }}
          npm ci
        elif [ -f "frontend/package.json" ] && [ "${{ matrix.service }}" = "frontend" ]; then
          cd frontend
          npm ci
        fi

    - name: Run linting
      run: |
        if [ -f "backend/${{ matrix.service }}/package.json" ]; then
          cd backend/${{ matrix.service }}
          npm run lint
        elif [ -f "frontend/package.json" ] && [ "${{ matrix.service }}" = "frontend" ]; then
          cd frontend
          npm run lint
        fi

    - name: Run type checking
      run: |
        if [ -f "backend/${{ matrix.service }}/package.json" ]; then
          cd backend/${{ matrix.service }}
          npm run type-check
        elif [ -f "frontend/package.json" ] && [ "${{ matrix.service }}" = "frontend" ]; then
          cd frontend
          npm run type-check
        fi

    - name: Run tests
      run: |
        if [ -f "backend/${{ matrix.service }}/package.json" ]; then
          cd backend/${{ matrix.service }}
          npm test
        elif [ -f "frontend/package.json" ] && [ "${{ matrix.service }}" = "frontend" ]; then
          cd frontend
          npm test
        fi

    - name: Generate coverage report
      run: |
        if [ -f "backend/${{ matrix.service }}/package.json" ]; then
          cd backend/${{ matrix.service }}
          npm run test:coverage
        elif [ -f "frontend/package.json" ] && [ "${{ matrix.service }}" = "frontend" ]; then
          cd frontend
          npm run test:coverage
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: |
        find . -name "package.json" -not -path "./node_modules/*" | while read file; do
          dir=$(dirname "$file")
          echo "Running npm audit in $dir"
          cd "$dir"
          npm audit --audit-level=moderate
          cd - > /dev/null
        done

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, customer-service, account-service, transaction-service, loan-service, analytics-service, websocket-service, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: |
          backend/${{ matrix.service }}/Dockerfile
          frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: helm upgrade --install mims-staging ./helm-chart --values ./helm-chart/values-staging.yaml

    - name: Run integration tests
      run: |
        echo "Running integration tests against staging..."
        # Add integration test commands here

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: helm upgrade --install mims-production ./helm-chart --values ./helm-chart/values-production.yaml

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against production..."
        # Add smoke test commands here

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add performance testing commands here
        # Example: k6 run performance-tests/load-test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/

  # Database Migration
  migrate:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run database migrations
      run: |
        echo "Running database migrations..."
        # Add database migration commands here
        # Example: npm run migrate:up

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        echo "Cleaning up old Docker images..."
        # Add cleanup commands here
